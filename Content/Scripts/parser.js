// @generated by Peggy 4.0.3.
//
// https://peggyjs.org/
(function(root) {
  "use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { program: peg$parseprogram };
  var peg$startRuleFunction = peg$parseprogram;

  var peg$c0 = ";";
  var peg$c1 = "Loop";
  var peg$c2 = "(";
  var peg$c3 = ")";
  var peg$c4 = "{";
  var peg$c5 = "}";
  var peg$c6 = "O";
  var peg$c7 = "*";
  var peg$c8 = "=>";
  var peg$c9 = "__";
  var peg$c10 = "->";
  var peg$c11 = "$z";
  var peg$c12 = "$y";
  var peg$c13 = "$x";
  var peg$c14 = "::";
  var peg$c15 = "xx";
  var peg$c16 = "<<";
  var peg$c17 = ">>";
  var peg$c18 = "^^";
  var peg$c19 = "vv";
  var peg$c20 = "$";
  var peg$c21 = "[...]";
  var peg$c22 = ":";
  var peg$c23 = "#";
  var peg$c24 = "@x";
  var peg$c25 = "@y";
  var peg$c26 = "@z";
  var peg$c27 = "@@x";
  var peg$c28 = "@@y";
  var peg$c29 = "@@z";
  var peg$c30 = "^";
  var peg$c31 = "[";
  var peg$c32 = ",";
  var peg$c33 = "]";
  var peg$c34 = "++";
  var peg$c35 = "vec3";
  var peg$c36 = "~";
  var peg$c37 = "-";
  var peg$c38 = ".";

  var peg$r0 = /^[&.]/;
  var peg$r1 = /^[0-9]/;
  var peg$r2 = /^[a-zA-Z@]/;
  var peg$r3 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation(";", false);
  var peg$e1 = peg$classExpectation(["&", "."], false, false);
  var peg$e2 = peg$literalExpectation("Loop", false);
  var peg$e3 = peg$literalExpectation("(", false);
  var peg$e4 = peg$literalExpectation(")", false);
  var peg$e5 = peg$literalExpectation("{", false);
  var peg$e6 = peg$literalExpectation("}", false);
  var peg$e7 = peg$literalExpectation("O", false);
  var peg$e8 = peg$literalExpectation("*", false);
  var peg$e9 = peg$literalExpectation("=>", false);
  var peg$e10 = peg$literalExpectation("__", false);
  var peg$e11 = peg$literalExpectation("->", false);
  var peg$e12 = peg$literalExpectation("$z", false);
  var peg$e13 = peg$literalExpectation("$y", false);
  var peg$e14 = peg$literalExpectation("$x", false);
  var peg$e15 = peg$literalExpectation("::", false);
  var peg$e16 = peg$literalExpectation("xx", false);
  var peg$e17 = peg$literalExpectation("<<", false);
  var peg$e18 = peg$literalExpectation(">>", false);
  var peg$e19 = peg$literalExpectation("^^", false);
  var peg$e20 = peg$literalExpectation("vv", false);
  var peg$e21 = peg$literalExpectation("$", false);
  var peg$e22 = peg$literalExpectation("[...]", false);
  var peg$e23 = peg$literalExpectation(":", false);
  var peg$e24 = peg$literalExpectation("#", false);
  var peg$e25 = peg$literalExpectation("@x", false);
  var peg$e26 = peg$literalExpectation("@y", false);
  var peg$e27 = peg$literalExpectation("@z", false);
  var peg$e28 = peg$literalExpectation("@@x", false);
  var peg$e29 = peg$literalExpectation("@@y", false);
  var peg$e30 = peg$literalExpectation("@@z", false);
  var peg$e31 = peg$literalExpectation("^", false);
  var peg$e32 = peg$literalExpectation("[", false);
  var peg$e33 = peg$literalExpectation(",", false);
  var peg$e34 = peg$literalExpectation("]", false);
  var peg$e35 = peg$literalExpectation("++", false);
  var peg$e36 = peg$literalExpectation("vec3", false);
  var peg$e37 = peg$literalExpectation("~", false);
  var peg$e38 = peg$literalExpectation("-", false);
  var peg$e39 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e40 = peg$literalExpectation(".", false);
  var peg$e41 = peg$classExpectation([["a", "z"], ["A", "Z"], "@"], false, false);
  var peg$e42 = peg$otherExpectation("whitespace");
  var peg$e43 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function(commands) {
     //remove useless comma
     let result = [];
     // this flat() is neccessary
     let row = commands.flat().map(cm=>(typeof cm === "function"?cm():cm));
     result.push(row);
     return result.join("");
};
  var peg$f1 = function(element) { return (typeof element === "function"?element():element); };
  var peg$f2 = function(a) { let elements = a.map (element => element[1]);
     let result = [];
      elements.forEach((el, index)=>{
      result.push(el);
      result.push("//");
     })
     return result;
    };
  var peg$f3 = function(LoopType) {
   //return (typeof LoopType === "function"?LoopType():LoopType);
   return LoopType;
};
  var peg$f4 = function(count, commands) {
   return ()=> {
                let result = [];
                for(let i = 0; i<count; i++){
                 commands.forEach(cm=>{
                 let row = (typeof cm === "function"? cm():cm);
                 result.push(row,"//");
                 })
                 //let row = commands.map(cm=>(typeof cm === "function"? cm():cm));
                 //result.push(row,"//");
                }
                return result.join("");
   }
};
  var peg$f5 = function(rotate, angle, rotateTime, objectNumber, gapLength) { if(angle>360.0) { angle = angle%360.0}
     let selected = ["construct", rotate, angle, rotateTime, objectNumber]; 
     if(gapLength) { selected.push(gapLength);}
     return selected; };
  var peg$f6 = function(radius, objectNumber) { return ()=> {let result = ["create", "circle"];
      let r = (typeof radius === "function"?radius():radius);
      let num = (typeof objectNumber === "function"?objectNumber():objectNumber);
      result.push(r,num);
      return result;}
     };
  var peg$f7 = function(op, parameter) { return [op, "position",parameter]; };
  var peg$f8 = function(op, parameter) {return ["offset",op, parameter];};
  var peg$f9 = function(op, parameter) { 
    return ()=> { 
         let result = ["rotate",op];
         let v = (typeof parameter === "function"?parameter():parameter);
         result.push(v);
      return result;      
            }
};
  var peg$f10 = function(op, parameter) {
      return ()=> {
        let result = [];
        result.push(op);
        result.push("create");
        let v = (typeof parameter === "function"?parameter():parameter);
        result.push(v);
      return result;
      }
};
  var peg$f11 = function(parameter) { return ["set", parameter]};
  var peg$f12 = function(op, parameter) { return ["set", op, parameter] };
  var peg$f13 = function(op, parameter) { return ["set", "mesh", parameter] };
  var peg$f14 = function(op, parameter) { return ["set","gaplength", parameter];};
  var peg$f15 = function(item) { return "move"; };
  var peg$f16 = function() { return "Z";};
  var peg$f17 = function() { return "Y";};
  var peg$f18 = function() { return "X";};
  var peg$f19 = function() { return "forward"; };
  var peg$f20 = function() { return "backward" ;};
  var peg$f21 = function() { return "leftward";};
  var peg$f22 = function() { return "rightward"; };
  var peg$f23 = function() { return "upward"; };
  var peg$f24 = function() { return "downward"; };
  var peg$f25 = function(ids, commandGroup) {
     let commands = commandGroup.map(arr=>arr[1]);
     let result = [];
     commands.forEach((command, index) =>{
        result.push(ids, command, "//");
     })
     return result;
   };
  var peg$f26 = function(ids, commandGroup) {
     let commands = commandGroup.map(arr=>arr[1]);
     let result = [];
     ids.forEach((item, index) => {
         commands.forEach(command => {
            result.push("Object", command, item, "//");
         })
     })
     
     return result;
   };
  var peg$f27 = function(ids, op2, parameter) {
     let result = [];
     result.push("LastGroup", op2);
     if(parameter) { result.push(parameter);}
     return result;
   };
  var peg$f28 = function(ids, op2, parameter) {
       let result = [];
       ids.forEach( (item, index) => {
          result.push("Object", op2, item);
          if(parameter) { result.push(parameter);}
          result.push("//");
       })
       return result;
    };
  var peg$f29 = function(op, parameter) {
    let result = [];
    result.push(op);
    if(parameter) { result.push(parameter);}
    return result;
};
  var peg$f30 = function() { return "offset";};
  var peg$f31 = function() { return "LastGroup";};
  var peg$f32 = function(matName) {  let selected = ["material" , matName];
    return selected; };
  var peg$f33 = function() { return ["color"]};
  var peg$f34 = function(op) { let result = ["direction"];
     if(op == "@z") { result.push("Z"); }
     else if(op == "@x") { result.push("X"); }
     else if(op == "@y") { result.push("Y"); }
     return result;
     };
  var peg$f35 = function(op) {let result = ["rotateRate"];
     if(op == "@@z") { result.push("Z"); }
     else if(op == "@@x") { result.push("X"); }
     else if(op == "@@y") { result.push("Y"); }
     return result;
  };
  var peg$f36 = function() { return "scale"; };
  var peg$f37 = function(name) { return text();};
  var peg$f38 = function(item) { console.log(item);
         return item.map ( arr => arr[1]);};
  var peg$f39 = function(item, rule) { let result = [];
         let filter = item.map(arr => arr[1]);
         filter.forEach(element=>{
            if(element.length<2) { result.push(element[0]);}
            else{
               let minValue = parseInt(element[0]);
               let increment = 1;
               if(rule) { increment = parseInt(rule[2]);}
               for(let maxValue = parseInt(element[1]); minValue <= maxValue; minValue+= increment){
                  console.log(minValue);
                  result.push(minValue);
               }
            }
         })
          return result;
       };
  var peg$f40 = function(x, y, z) { return [x, y, z].join("|"); };
  var peg$f41 = function(number01, number02) {
       let value01 = parseFloat(number01);
       let value02 = parseFloat(number02);
       if(value01 > value02) { return  ()=> Math.random()*(value02-value01+1)+value01; }
       else  { return ()=> Math.random()*(value02-value01+1)+value01;}
    };
  var peg$f42 = function(min, max) {
             return () => Math.floor(Math.random() *( max - min + 1)) + min;
     };
  var peg$f43 = function(integer01, integer02) { let value01 = parseInt(integer01); 
          let value02 = parseInt(integer02);
          if(value01>value02){ return [value02, value01];}
          else if(value01<value02) { return [value01, value02]}
          else { return [value01];}
          };
  var peg$f44 = function() { return text(); };
  var peg$f45 = function() { return text(); };
  var peg$f46 = function() { return text();};
  var peg$f47 = function() { return parseInt(text());};
  var peg$f48 = function() { return text();};
  var peg$currPos = options.peg$currPos | 0;
  var peg$savedPos = peg$currPos;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = peg$currPos;
  var peg$maxFailExpected = options.peg$maxFailExpected || [];
  var peg$silentFails = options.peg$silentFails | 0;

  var peg$result;

  if (options.startRule) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      if (pos >= peg$posDetailsCache.length) {
        p = peg$posDetailsCache.length - 1;
      } else {
        p = pos;
        while (!peg$posDetailsCache[--p]) {}
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseprogram() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecommand();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsecommand();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecommand() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseLoop();
    if (s2 === peg$FAILED) {
      s2 = peg$parsechain();
      if (s2 === peg$FAILED) {
        s2 = peg$parsefunction();
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f1(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsechain() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parse_();
    s4 = peg$parsefunction();
    if (s4 !== peg$FAILED) {
      s5 = peg$parse_();
      s6 = input.charAt(peg$currPos);
      if (peg$r0.test(s6)) {
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s3 = [s3, s4, s5, s6];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$currPos;
        s3 = peg$parse_();
        s4 = peg$parsefunction();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = input.charAt(peg$currPos);
          if (peg$r0.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s3 = [s3, s4, s5, s6];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f2(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefunction() {
    var s0;

    s0 = peg$parseManagerCommand();
    if (s0 === peg$FAILED) {
      s0 = peg$parseObjectCommand();
    }

    return s0;
  }

  function peg$parseLoopElement() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsedirectionalSpawn();
    if (s2 === peg$FAILED) {
      s2 = peg$parseIterationCommand();
      if (s2 === peg$FAILED) {
        s2 = peg$parseBuildCircleCommand();
        if (s2 === peg$FAILED) {
          s2 = peg$parseShaderCommand();
          if (s2 === peg$FAILED) {
            s2 = peg$parseLoop();
          }
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s4 = peg$c0;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f3(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseLoop() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 4) === peg$c1) {
      s2 = peg$c1;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parsepositiveInteger();
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 123) {
              s10 = peg$c4;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = [];
              s13 = peg$parseLoopElement();
              while (s13 !== peg$FAILED) {
                s12.push(s13);
                s13 = peg$parseLoopElement();
              }
              s13 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 125) {
                s14 = peg$c5;
                peg$currPos++;
              } else {
                s14 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e6); }
              }
              if (s14 !== peg$FAILED) {
                s15 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f4(s6, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseManagerCommand() {
    var s0;

    s0 = peg$parseconstructionCommand();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedirectionalSpawn();
      if (s0 === peg$FAILED) {
        s0 = peg$parseShaderCommand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseIterationCommand();
        }
      }
    }

    return s0;
  }

  function peg$parseconstructionCommand() {
    var s0;

    s0 = peg$parseconstructionOperation();
    if (s0 === peg$FAILED) {
      s0 = peg$parseBuildCircleCommand();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSetMeshCommand();
      }
    }

    return s0;
  }

  function peg$parseShaderCommand() {
    var s0;

    s0 = peg$parseSetMaterialCommand();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSetColorCommand();
    }

    return s0;
  }

  function peg$parseIterationCommand() {
    var s0;

    s0 = peg$parseMoveSpawnLocation();
    if (s0 === peg$FAILED) {
      s0 = peg$parsesetSpawnRotation();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSetGapCommand();
      }
    }

    return s0;
  }

  function peg$parseconstructionOperation() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parserot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsepositiveInteger();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$parsepositiveInteger();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parsepositiveNumber();
            if (s9 === peg$FAILED) {
              s9 = null;
            }
            s10 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f5(s1, s3, s5, s7, s9);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBuildCircleCommand() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 79) {
      s2 = peg$c6;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 40) {
        s4 = peg$c2;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        s6 = peg$parserandomNumber();
        if (s6 === peg$FAILED) {
          s6 = peg$parsepositiveNumber();
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 41) {
            s8 = peg$c3;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 42) {
              s10 = peg$c7;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e8); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parserandomPositiveInteger();
              if (s12 === peg$FAILED) {
                s12 = peg$parsepositiveInteger();
              }
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                peg$savedPos = s0;
                s0 = peg$f6(s6, s12);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMoveSpawnLocation() {
    var s0;

    s0 = peg$parseDirectSetLocation();
    if (s0 === peg$FAILED) {
      s0 = peg$parseOffsetLocation();
    }

    return s0;
  }

  function peg$parseDirectSetLocation() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseSetPositionSymbol();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevector();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f7(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseOffsetLocation() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseOffsetSymbol_X();
    if (s1 === peg$FAILED) {
      s1 = peg$parseOffsetSymbol_Y();
      if (s1 === peg$FAILED) {
        s1 = peg$parseOffsetSymbol_Z();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsenumber();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f8(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesetSpawnRotation() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parserot();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parserandomNumber();
      if (s3 === peg$FAILED) {
        s3 = peg$parsenumber();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f9(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedirectionalSpawn() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsedirectionalSymbol();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parserandomPositiveInteger();
      if (s3 === peg$FAILED) {
        s3 = peg$parsepositiveInteger();
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f10(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetMaterialCommand() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseassignMaterial();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f11(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetColorCommand() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsecolorOp();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevector();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f12(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetMeshCommand() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevariable();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetGapCommand() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c9) {
      s1 = peg$c9;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsepositiveNumber();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f14(s1, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSetPositionSymbol() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c10) {
      s3 = peg$c10;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOffsetSymbol_Z() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c11) {
      s3 = peg$c11;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f16();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOffsetSymbol_Y() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c12) {
      s3 = peg$c12;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f17();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseOffsetSymbol_X() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c13) {
      s3 = peg$c13;
      peg$currPos += 2;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedirectionalSymbol() {
    var s0;

    s0 = peg$parseforwardSymbol();
    if (s0 === peg$FAILED) {
      s0 = peg$parsebackwardSymbol();
      if (s0 === peg$FAILED) {
        s0 = peg$parseleftwardSymbol();
        if (s0 === peg$FAILED) {
          s0 = peg$parserightwardSymbol();
          if (s0 === peg$FAILED) {
            s0 = peg$parseupwardSymbol();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedownwardSymbol();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseforwardSymbol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c14) {
      s1 = peg$c14;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f19();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebackwardSymbol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseleftwardSymbol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f21();
    }
    s0 = s1;

    return s0;
  }

  function peg$parserightwardSymbol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f22();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseupwardSymbol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c18) {
      s1 = peg$c18;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f23();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedownwardSymbol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c19) {
      s1 = peg$c19;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f24();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseObjectCommand() {
    var s0;

    s0 = peg$parseObjectCommandRegion();
    if (s0 === peg$FAILED) {
      s0 = peg$parseNewObjectCommandRegion();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSpecificObjectControlCommand();
        if (s0 === peg$FAILED) {
          s0 = peg$parseNewestObjectControlCommand();
        }
      }
    }

    return s0;
  }

  function peg$parseNewObjectCommandRegion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parselastObjects();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        s8 = peg$parseObjectFunction();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          s8 = peg$parseObjectFunction();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s7 = peg$c5;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f25(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectCommandRegion() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseidFormat();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 123) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        s8 = peg$parseObjectFunction();
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s7 = [s7, s8, s9];
          s6 = s7;
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          s8 = peg$parseObjectFunction();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s7 = [s7, s8, s9];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s7 = peg$c5;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNewestObjectControlCommand() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parselastObjects();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseobjectOP();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseobjectParameter();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f27(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSpecificObjectControlCommand() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseidFormat();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseobjectOP();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseobjectParameter();
        if (s5 === peg$FAILED) {
          s5 = null;
        }
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f28(s1, s3, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseObjectFunction() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseobjectOP();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseobjectParameter();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 59) {
        s5 = peg$c0;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f29(s1, s3);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidFormat() {
    var s0;

    s0 = peg$parselist();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIDGroup();
    }

    return s0;
  }

  function peg$parseobjectOP() {
    var s0;

    s0 = peg$parseoffsetSymbol();
    if (s0 === peg$FAILED) {
      s0 = peg$parserot();
      if (s0 === peg$FAILED) {
        s0 = peg$parserotRate();
        if (s0 === peg$FAILED) {
          s0 = peg$parsescale();
          if (s0 === peg$FAILED) {
            s0 = peg$parseassignMaterial();
            if (s0 === peg$FAILED) {
              s0 = peg$parsecolorOp();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseobjectParameter() {
    var s0;

    s0 = peg$parsevariable();
    if (s0 === peg$FAILED) {
      s0 = peg$parsevector();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parserandomNumber();
        }
      }
    }

    return s0;
  }

  function peg$parseoffsetSymbol() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c20;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f30();
    }
    s0 = s1;

    return s0;
  }

  function peg$parselastObjects() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseassignMaterial() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 58) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parsevariable();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f32(s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolorOp() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 35) {
      s2 = peg$c23;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f33();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserot() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c24) {
      s1 = peg$c24;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c25) {
        s1 = peg$c25;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c26) {
          s1 = peg$c26;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f34(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parserotRate() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c27) {
      s1 = peg$c27;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c28) {
        s1 = peg$c28;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c29) {
          s1 = peg$c29;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsescale() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c30;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsevariable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsenumber();
    if (s2 === peg$FAILED) {
      s2 = peg$parseword();
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsenumber();
        if (s2 === peg$FAILED) {
          s2 = peg$parseword();
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f37(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parselist() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsenumber();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = [];
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c32;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c32;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
        }
        s4 = [s4, s5, s6, s7];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parsenumber();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = [];
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c32;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c32;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
            }
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c33;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f38(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIDGroup() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c31;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      s5 = peg$parsepositiveIntegerRange();
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = [];
        if (input.charCodeAt(peg$currPos) === 44) {
          s8 = peg$c32;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          if (input.charCodeAt(peg$currPos) === 44) {
            s8 = peg$c32;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e33); }
          }
        }
        s4 = [s4, s5, s6, s7];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_();
          s5 = peg$parsepositiveIntegerRange();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = [];
            if (input.charCodeAt(peg$currPos) === 44) {
              s8 = peg$c32;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
            while (s8 !== peg$FAILED) {
              s7.push(s8);
              if (input.charCodeAt(peg$currPos) === 44) {
                s8 = peg$c32;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
            }
            s4 = [s4, s5, s6, s7];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c33;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          s5 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c34) {
            s6 = peg$c34;
            peg$currPos += 2;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e35); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            s8 = peg$parsepositiveInteger();
            if (s8 !== peg$FAILED) {
              s6 = [s6, s7, s8];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f39(s2, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsevector() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = [];
    if (input.substr(peg$currPos, 4) === peg$c35) {
      s2 = peg$c35;
      peg$currPos += 4;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (input.substr(peg$currPos, 4) === peg$c35) {
        s2 = peg$c35;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
    }
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c2;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsenumber();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s6 = peg$c32;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e33); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsenumber();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 44) {
              s10 = peg$c32;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              s12 = peg$parsenumber();
              if (s12 !== peg$FAILED) {
                s13 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 41) {
                  s14 = peg$c3;
                  peg$currPos++;
                } else {
                  s14 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                }
                if (s14 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f40(s4, s8, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserandomNumber() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c2;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsenumber();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 126) {
          s6 = peg$c36;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsenumber();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s10 = peg$c3;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f41(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parserandomPositiveInteger() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c2;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsepositiveInteger();
      if (s4 !== peg$FAILED) {
        s5 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 126) {
          s6 = peg$c36;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e37); }
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parse_();
          s8 = peg$parsepositiveInteger();
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 41) {
              s10 = peg$c3;
              peg$currPos++;
            } else {
              s10 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e4); }
            }
            if (s10 !== peg$FAILED) {
              s11 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f42(s4, s8);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepositiveIntegerRange() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsepositiveInteger();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 126) {
        s3 = peg$c36;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsepositiveInteger();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f43(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenumber() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$currPos;
    s3 = [];
    s4 = input.charAt(peg$currPos);
    if (peg$r1.test(s4)) {
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s4 !== peg$FAILED) {
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = input.charAt(peg$currPos);
        if (peg$r1.test(s4)) {
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
      }
    } else {
      s3 = peg$FAILED;
    }
    if (s3 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s4 = peg$c38;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = input.charAt(peg$currPos);
        if (peg$r1.test(s6)) {
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = input.charAt(peg$currPos);
          if (peg$r1.test(s6)) {
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
        }
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c38;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = [];
      s5 = input.charAt(peg$currPos);
      if (peg$r1.test(s5)) {
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r1.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f44();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepositiveNumber() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r1.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r1.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c38;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = input.charAt(peg$currPos);
        if (peg$r1.test(s5)) {
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = input.charAt(peg$currPos);
          if (peg$r1.test(s5)) {
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
        }
        s2 = [s2, s3, s4];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c38;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = [];
      s4 = input.charAt(peg$currPos);
      if (peg$r1.test(s4)) {
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = input.charAt(peg$currPos);
          if (peg$r1.test(s4)) {
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e39); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f45();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseintegerElement() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 45) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = input.charAt(peg$currPos);
    if (peg$r1.test(s3)) {
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = input.charAt(peg$currPos);
        if (peg$r1.test(s3)) {
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f46();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsepositiveInteger() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = input.charAt(peg$currPos);
    if (peg$r1.test(s2)) {
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = input.charAt(peg$currPos);
        if (peg$r1.test(s2)) {
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f47();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseword() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedigit();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsedigit();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48();
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedigit() {
    var s0;

    s0 = input.charAt(peg$currPos);
    if (peg$r2.test(s0)) {
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = input.charAt(peg$currPos);
    if (peg$r3.test(s1)) {
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e43); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = input.charAt(peg$currPos);
      if (peg$r3.test(s1)) {
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e42); }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (options.peg$library) {
    return /** @type {any} */ ({
      peg$result,
      peg$currPos,
      peg$FAILED,
      peg$maxFailExpected,
      peg$maxFailPos
    });
  }
  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

  root.myparser = {
    StartRules: ["program"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse
  };
})(this);
